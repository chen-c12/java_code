package com.chenddd.lock;

import org.apache.zookeeper.*;
import org.apache.zookeeper.data.Stat;

import java.io.IOException;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.CountDownLatch;

/**
* Author: chenddd
* Date: 2022/4/3 16:23
* FileName: DistributedLock
* Description: zookeeper distributedLock test
*/
public class DistributedLock {
    private final String connectString = "hadoop001:2181,hadoop002:2181,hadoop003:2181";
    private final int sessionTimeout = 2000;
    private final ZooKeeper zk;

    private CountDownLatch connectLatch = new CountDownLatch(1);
    public CountDownLatch waitLatch = new CountDownLatch(1);
    private String waitPath;
    private String currentMode;


    public DistributedLock() throws IOException, InterruptedException, KeeperException {

        //获取连接
         zk = new ZooKeeper(connectString, sessionTimeout, new Watcher() {
            @Override
            public void process(WatchedEvent event) {
                //connectLatch  如果连接上zk 可以释放
                if (event.getState() == Event.KeeperState.SyncConnected){
                    connectLatch.countDown();
                }
                //waitLatch 需要释放
                if (event.getType() == Event.EventType.NodeDeleted && event.getPath().equals(waitPath)){
                    waitLatch.countDown();
                }
            }
        });

         //等待zk正常连接后，往下走程序
         connectLatch.await();

        //判断根节点/locks是否存在
        Stat stat = zk.exists("/locks", false);
        if (stat == null){
            //需要创建根节点
            zk.create("/locks", "locks".getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);
        }
    }

    ///对zk加锁
    public void zkLock(){
        //创建对应的临时带序号节点
        try {
            currentMode = zk.create("/locks/" + "seq-", null, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL_SEQUENTIAL);

            //判断创建的节点是否是最小的序号节点，如果是获取到锁，如果不是，监听序号前一个节点
            List<String> children = zk.getChildren("/locks", false);

            //如果children只有一个值，那就直接获取锁，如果多个节点需要判断，谁最小
            if (children.size() == 1){
                return;
            }else {
                Collections.sort(children);

                //获取节点名称seq-00000000
                String thisNode = currentMode.substring("/locks/".length());
                //通过seq-00000000获取改节点在children集合的位置
                int index = children.indexOf(thisNode);

                //判断
                if (index == -1){
                    System.out.println("数据异常");
                }else if(index == 0){
                    //就一个节点可以获取锁
                    return;
                }else {
                    //需要监听前一个节点
                    waitPath = "/locks/"+children.get(index-1);
                    zk.getData(waitPath,true,null);

                    //等待监听
                    waitLatch.await();

                    return;
                }
            }

        } catch (KeeperException e) {
            e.printStackTrace();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    //解锁
    public void unlock(){
        //删除节点
        try {
            zk.delete(currentMode, -1);
        } catch (InterruptedException e) {
            e.printStackTrace();
        } catch (KeeperException e) {
            e.printStackTrace();
        }

    }
}
